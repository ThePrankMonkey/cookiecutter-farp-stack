import logging
from typing import Annotated

from fastapi import APIRouter, HTTPException, Query, status
from sqlmodel import select
from app.db import SessionDep
from app.models.{{ model }}.model import (
    {{ model|title }},
    {{ model|title }}Public,
    {{ model|title }}Create,
    {{ model|title }}Update,
)

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/{{ model }}s")

############
## Create ##
############

@router.post("", response_model={{ model|title }}Public, status_code=status.HTTP_201_CREATED)
def create({{ model }}: {{ model|title }}Create, session: SessionDep):
    logger.debug("Request to POST {{ model|title }} with {{{ model }}}")
    db_{{ model }} = {{ model|title }}.model_validate({{ model }})
    session.add(db_{{ model }})
    session.commit()
    session.refresh(db_{{ model }})
    return db_{{ model }}

##############
## Retrieve ##
##############

@router.get("", response_model=list[{{ model|title }}Public])
def get_plural(
    session: SessionDep,
    offset: int = 0,
    limit: Annotated[int, Query(le=100)] = 100,
):
    logger.debug("Request to GET {{ model|title }}s")
    {{ model }}s = session.exec(select({{ model|title }}).offset(offset).limit(limit)).all()
    return {{ model }}s


@router.get("/{{{ model }}_id}")
def get_singular({{ model }}_id: int, session: SessionDep):
    logger.debug(f"Request to GET {{ model|title }} {{{ model }}_id}")
    {{ model }} = session.get({{ model|title }}, {{ model }}_id)
    if not {{ model }}:
        raise HTTPException(status_code=404, detail="{{ model|title }} not found")
    logger.info(f"{{ model|title }} {{{ model }}_id}: {{{ model }}}")
    return {{ model }}

############
## Update ##
############

@router.patch("/{{{ model }}_id}", response_model={{ model|title }}Public)
def update({{ model }}_id: int, {{ model }}: {{ model|title }}Update, session: SessionDep):
    logger.debug(f"Request to PATCH {{ model|title }} {{{ model }}_id} with {{{ model }}}")
    db_{{ model }} = session.get({{ model|title }}, {{ model }}_id)
    if not db_{{ model }}:
        raise HTTPException(status_code=404, detail="{{ model|title }} not found")
    {{ model }}_data = {{ model }}.model_dump(exclude_unset=True)
    db_{{ model }}.sqlmodel_update({{ model }}_data)
    session.add(db_{{ model }})
    session.commit()
    session.refresh(db_{{ model }})
    return db_{{ model }}

############
## Delete ##
############

@router.delete("/{{{ model }}_id}")
def delete({{ model }}_id: int, session: SessionDep):
    logger.debug(f"Request to DELETE {{ model|title }} {{{ model }}_id}")
    db_{{ model }} = session.get({{ model|title }}, {{ model }}_id)
    if not db_{{ model }}:
        raise HTTPException(status_code=404, detail="{{ model|title }} not found")
    session.delete(db_{{ model }})
    session.commit()
    return {"message": f"{{ model|title }} {{{ model }}_id} was deleted."}
